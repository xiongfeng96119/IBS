<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


    <context:property-placeholder location="classpath:dbcp.properties" />
    <!-- 连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
    </bean>

    <!-- 集成JPA -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="cn.itsource.domain,cn.itsource.vo"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true" />
                <property name="generateDdl" value="false" />
                <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
            </bean>
        </property>
    </bean>

    <!-- 声明式事务管理 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 开启事务管理的注解支持 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 扫描包 -->
    <context:component-scan base-package="cn.itsource.service,cn.itsource.easypoi"/>

    <!--
        集成SpringDataJPA
            SpringDataJPA让我们的dao层只写接口，不写实现类，不能再使用之前的方式扫描包，
            而要使用SpringDataJPA特殊扫描包的方式
        为何不能使用之前的方式扫描包？
            因为我们只写了接口，没有写实现类，无法添加@Repositroy注解
            而现在这种扫描包的方式，扫描到的都是接口（继承了JpaRepository接口），SpringDataJPA在扫描到这些接口后，
            会自动帮我们生成一个实现类（实现我们自己的接口，并且继承SimpleJpaRepository类），如何生成的？
            使用动态代理技术
        factory-class属性表示使用自定义的类来替代SimpleJpaRepository类来作为动态代理类的直接父类
    -->
    <jpa:repositories base-package="cn.itsource.repository"
      transaction-manager-ref="transactionManager"
      entity-manager-factory-ref="entityManagerFactory"
      factory-class="cn.itsource.factorybean.BaseRepositoryFactoryBean"/>


    <!-- 导入Shiro的配置文件 -->
    <import resource="classpath:spring-*.xml" />

</beans>